根据输入的正整数n (1　　米字形由一个(2n-1)*(2n-1)的矩阵组成，矩阵包含从大写A开始的n个字母
　　例如:n=3时，包含A,B,C；n=4时，包含A,B,C,D。
　　矩阵的正中间为n个字母中字典序最大的那个，从这个字母开始，沿着西北、正北、东北、正西、正东、西南、正南、东南八个方向各有一条由大写字母组成的直线。并且直线上的字母按字典序依次减小，直到大写字母A。
　　矩阵的其它位置用英文句号．填充。

　　样例输入一
　　3

　　样例输出一
　　Ａ．Ａ．Ａ
　　．ＢＢＢ．
　　ＡＢＣＢＡ
　　．ＢＢＢ．
　　Ａ．Ａ．Ａ

　　样例输入二
　　4

　　样例输出二
　　Ａ．．Ａ．．Ａ
　　．Ｂ．Ｂ．Ｂ．
　　．．ＣＣＣ．．
　　ＡＢＣＤＣＢＡ
　　．．ＣＣＣ．．
　　．Ｂ．Ｂ．Ｂ．
　　Ａ．．Ａ．．Ａ

--------------------------------------------
#include<bits/stdc++.h>
using namespace std;
int main () {
	int n;
	scanf("%d", &n);
	vector<vector<int> > v;
	v.resize((2 * n), vector<int>(2 * n));
	for (int i = 0; i < v.size(); i++) {
		for (int j = 0; j < v[v.size() - 1].size(); j++) {
			v[i][j] = -1;
		}
	}
	for (int l = 0; l < n; l++) {
		v[l][l] = l;
		v[l][n - 1] = l;
		v[l][2 * n - 2 - l] = l;
		v[n - 1][2 * n - 2 - l] = l;
		v[2 * n - 2 - l][2 * n - 2 - l] = l;
		v[2 * n - 2 - l][n - 1] = l;
		v[2 * n - 2 - l][l] = l;
		v[n - 1][l] = l;
	}
	for (int i = 0; i <= 2 * n - 2; i++) {
		for (int j = 0; j <= 2 * n - 2; j++) {
			if (v[i][j] == -1) {
				printf(".");
			} else {
				printf("%c", v[i][j] + 'A');
			}
		}
		printf("\n");
	}
	return 0;
}
