问题描述
　　有一个箱子容量为V（正整数，0＜＝V＜＝20000），同时有n个物品（0＜n＜＝30），每个物品有一个体积（正整数）。
　　要求n个物品中，任取若干个装入箱内，使箱子的剩余空间为最小。
输入格式
　　第一行为一个整数，表示箱子容量；
　　第二行为一个整数，表示有n个物品；
　　接下来n行，每行一个整数表示这n个物品的各自体积。
输出格式
　　一个整数，表示箱子剩余空间。
　　样例输入
　　24
　　6
　　8
　　3
　　12
　　7
　　9
　　7
样例输出
0

----------------------------------------
#include<bits/stdc++.h>
using namespace std;
int main () {
	int V, n, maxV = 0;
	scanf("%d %d", &V, &n);
	vector<int> v(n), dp(V + 1);
	for (int i = 0; i < n; i++) {
		scanf("%d", &v[i]);
	}
	for (int i = 0; i < n; i++) {
		for (int p = V; p >= v[i]; p--) {
			dp[p] = max(dp[p], dp[p - v[i]] + v[i]);
			maxV = max(maxV, dp[p]);
		}
	}
	printf("%d", V - maxV);
	return 0;
}

---------------------------------------------
01背包问题
物品价格与其体积相等
第i个物品可以选择装入背包，也可以选择不装入背包
1.若装入背包：则追溯前i-1个物品放入背包的最佳情况
2.若不装入背包：则转换为追溯前i-1个物品放入[已经减去第i个物品体积的]背包的最佳情况
且二维数组的dp可以优化为一维数组
