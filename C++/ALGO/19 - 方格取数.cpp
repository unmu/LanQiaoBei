问题描述
　　设有N*N的方格图(N<=10),我们将其中的某些方格中填入正整数,而其他的方格中则放入数字0。
　　某人从图的左上角的A 点(1,1)出发，可以向下行走，也可以向右走，直到到达右下角的B点(N,N)。在走过的路上，他可以取走方格中的数（取走后的方格中将变为数字0）。
　　此人从A点到B 点共走两次，试找出2条这样的路径，使得取得的数之和为最大。
输入格式
　　输入的第一行为一个整数N（表示N*N的方格图），接下来的每行有三个整数，前两个表示位置，第三个数为该位置上所放的数。一行单独的0表示输入结束。
输出格式
　　只需输出一个整数，表示2条路径上取得的最大的和。
样例输入
　　8
　　2 3 13
　　2 6 6
　　3 5 7
　　4 4 14
　　5 2 21
　　5 6 4
　　6 3 15
　　7 2 14
　　0 0 0
样例输出
　　67

----------------------------------------------------
想象成两个人同时出发。注意同时到达某一相同地点时只能加一次a[i][j]，其他情况则分别加上各自的a[i][j]

#include<bits/stdc++.h>
using namespace std;
#define MAX 15
int main () {
	int n;
	scanf("%d", &n);
	int a[n + 1][n + 1] = {0};
	while (1) {
		int x, y, num;
		scanf("%d %d %d", &x, &y, &num);
		if(x == 0 && y == 0 && num == 0) {
			break;
		}
		a[x][y] = num;
	}
	int dp[n + 1][n + 1][n + 1][n + 1] = {0};
	for (int x1 = 1; x1 <= n; x1++) {
		for (int y1 = 1; y1 <= n; y1++) {
			for (int x2 = 1; x2 <= n; x2++) {
				for (int y2 = 1; y2 <= n; y2++) {
					if (x1 + y1 == x2 + y2) {
						int tmp = max(dp[x1 - 1][y1][x2 - 1][y2], dp[x1 - 1][y1][x2][y2 - 1]);
						tmp = max(tmp, dp[x1][y1 - 1][x2 - 1][y2]);
						tmp = max(tmp, dp[x1][y1 - 1][x2][y2 - 1]);
						if (x1 == x2 && y1 == y2) {
							dp[x1][y1][x2][y2] = tmp + a[x1][y1];
						} else {
							dp[x1][y1][x2][y2] = tmp + a[x1][y1] + a[x2][y2];
						}
					}
				}
			}
		}
	}
	printf("%d\n", dp[n][n][n][n]);
	return 0;
} 

-----------------------------------------------
鸣谢
  https://blog.csdn.net/priestessofbirth/article/details/79302086
