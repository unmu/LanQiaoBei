问题描述
　　给定一个n*n的棋盘，棋盘中有一些位置不能放皇后。现在要向棋盘中放入n个黑皇后和n个白皇后，使任意的两个黑皇后都不在同一行、同一列或同一条对角线上，任意的两个白皇后都不在同一行、同一列或同一条对角线上。问总共有多少种放法？n小于等于8。
输入格式
　　输入的第一行为一个整数n，表示棋盘的大小。
　　接下来n行，每行n个0或1的整数，如果一个整数为1，表示对应的位置可以放皇后，如果一个整数为0，表示对应的位置不可以放皇后。
输出格式
　　输出一个整数，表示总共有多少种放法。
样例输入
4
1 1 1 1
1 1 1 1
1 1 1 1
1 1 1 1
样例输出
2
样例输入
4
1 0 1 1
1 1 1 1
1 1 1 1
1 1 1 1
样例输出
0


-----------------------------------------------------------------
#include<bits/stdc++.h>
using namespace std;
void dfs(vector<vector<int> > &v, int x, int &n, int &ans, int sign) {
	if (x == n) {
		if (sign == -2) {
			ans++;
			return;
		}
		dfs(v, 0, n, ans, -2);
		return;
	}
	for (int y = 0; y < n; y++) {
		bool flag = true;
		if (v[x][y] != 1) {
			continue;
		}
		for (int j = 0; j < x; j++) {
			//当前列已出现皇后
			if (v[j][y] == sign) {
				flag = false;
				break;
			}
		}
		if (flag == false) {
			continue;
		} 
		for (int j = x, k = y; j >= 0 && k >= 0; j--, k--) {
			//左上方向已出现皇后 
			if (v[j][k] == sign) {
				flag = false;
				break;
			}
		}
		if (flag == false) {
			continue;
		} 
		for (int j = x, k = y; j >= 0 && k < n; j--, k++) {
			//右上方向已出现皇后 
			if (v[j][k] == sign) {
				flag = false;
				break;
			}
		}
		if (flag == false) {
			continue;
		} 
		//找到一可选位置 
		v[x][y] = sign;
		dfs(v, x + 1, n, ans, sign);
		v[x][y] = 1;
	}
}
int main () {
	int n, tmp;
	scanf ("%d", &n);
	vector<vector<int> > v;
	v.resize(n, vector<int>(n));
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			scanf("%d", &tmp);
			v[i][j] = tmp;
		}
	}
	int ans = 0;
	dfs(v, 0, n, ans, -1);
	printf("%d", ans);
	return 0;
}

--------------------------------------------------------------

** 不支持写成<vector<vector<int>>,会编译出错，需写成<vector<vector<int> >
